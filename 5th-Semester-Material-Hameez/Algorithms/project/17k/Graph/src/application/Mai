package application;
	
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.layout.BorderPane;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;

public class Main extends Application{
	@Override
	public void start(Stage primaryStage) {
		try {
			BorderPane root = new BorderPane();
			Scene scene = new Scene(root,1800,1000);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
		
		} catch(Exception e) {

		}
	}
	
	@SuppressWarnings("unused")
	public static void main(String[] args) {
		Circle[] nodes = null;
		
		File file = new File("D:/Semester 5/Algo/Project/benchmark/input20.txt");
		String st; 
		int i = 1;
		int vertices = 0;
		String[] arr;
		Graph graph = null;
		
		try {
			BufferedReader br = new BufferedReader(new FileReader(file));
			
		
			  while ((st = br.readLine()) != null) {
				
			    if(i == 3) {
			    	vertices = Integer.parseInt(st);
			    	graph = new Graph(vertices);
			    	nodes=  new Circle[vertices];
			    }
			    if(i < vertices+5 && i > 4) {
			    	arr = st.split("\t");
			    	graph.setCoords(Integer.parseInt(arr[0]), Double.parseDouble(arr[1]), Double.parseDouble(arr[2]));
			    
			    }
			    if(i > vertices+5) {
			    	arr = st.split("\t");
			    	
			    for(int j=1; j<arr.length; j = j+4) {
			    		if(!arr[j].equals(arr[0])) {
			    			graph.UaddEdge(Integer.parseInt(arr[0]), Integer.parseInt(arr[j]), Double.parseDouble(arr[j+2])/10000000);
			    		}
			    	}
			    }
			    i++;
			  }
			  
	
			  br.close();
			
		} catch (Exception e) {

        }
		
		
		
//      graph.printGraph();
//      graph.printAdjacency();
//		System.out.println(graph.totaledges());
//		try {
//        System.out.println(graph.clusteringCoefficient());
//		}
//		catch(Exception e) {
//			e.Trace();
//		}
      graph.convertIntoMatrix();
        
		System.out.println("\nPrims Algorithm: \n");
		PrimsMST pmst = new PrimsMST(graph.getAdjacencylist(), graph.getNode_num(), graph);
		pmst.primMST();
		pmst.getImage();
		//graph.getImage();
		
//		System.out.println("\nKruskal Algorithm: \n");
//		KruskalsMST kmst = new KruskalsMST(graph.getAdjacencylist(), graph.getNode_num(), graph.totaledges(),graph);
//		kmst.kruskalMST();
//		kmst.getImage();
//		System.out.println("\nDjikstra Algorithm: \n");
//		DijkstraShortestPath d = new DijkstraShortestPath(graph.getAdjacencylist(), graph.getNode_num(),graph);
//		d.dijkstra_GetMinDistances(6);
//		d.getImage();
//		System.out.println("\nBellman Ford Algorithm: \n");
//		BellmanFordShortestPath b = new BellmanFordShortestPath(graph.getAdjacencylist(), graph.getNode_num(), graph.totaledges(), graph);
//		b.BellmanFord(3);
//		b.getImage();
        FloydWarshall f = new FloydWarshall();
        f.floydWarshall(graph.convertIntoMatrix(),graph.getNode_num());
		
        
	}

}
